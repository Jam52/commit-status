{"version":3,"sources":["assets/icons/plus.svg","components/Header/Header.js","components/AddProject/AddProject.js","components/ProjectDetails/ProjectDetails.js","components/Filter/Filter.js","components/ProjectList/ProjectList.js","components/RefreshSettings/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","React","Component","axios","require","errorMessages","unauthorized_entry","not_found","default_error","AddProject","state","input","handleChange","e","_this","setState","target","value","alertUser","message","errorElement","document","closeBtn","errorMessage","createTextNode","classList","add","appendChild","innerText","addEventListener","handleClose","querySelector","focus","handleSubmit","preventDefault","params","process","REACT_APP_GITHUB_TOKEN","headers","Authorization","get","concat","then","data","obj","name","repository","full_name","status","props","addProject","catch","er","response","handlePress","removeChild","parentElement","render","onSubmit","type","spellCheck","onChange","placeholder","alt","src","ProjectDetails","commitDetails","shouldRefresh","componentDidMount","componentDidUpdate","prevProps","isRefreshEnabled","interval","refreshIntervalMillis","stopLocalAutoRefresh","startLocalAutoRefresh","clearInterval","setInterval","this","_this2","stopPropagation","prevState","_this3","toggleMessage","onClick","toggleAutoRefresh","map","item","index","details","commit","committer","date","href","html_url","rel","Filter","printProjectList","proj","project","key","handleProjectClick","onRemoveClick","icons_delete","isOpen","ProjectDetails_ProjectDetails_ProjectDetails","projects","unhealthyList","filter","esm","length","PureComponent","ProjectList","DEFAULT_STATUS","LS_PROJECTS_KEY","authoRefreshIntervalId","loadProjects","autoRefreshProjectStatuses","componentWillUnmount","stopProjectsAutoRefresh","snapshot","sortedProjects","getProjectsFromLocalStorage","sort","sortProjects","loadProjectStatuses","promiseArray","Promise","all","results","updatedProjects","Object","toConsumableArray","shouldUpdateState","forEach","reason","console","log","b","newProject","some","newArray","addProjectToLocalStorage","projectName","push","localStorage","setItem","JSON","stringify","removeProjectFromLocalStorage","updatedProjectsList","AddProject_AddProject_AddProject","Filter_Filter_Filter","bind","assertThisInitialized","event","filteredArray","getItem","parse","pIndex","objectSpread2","nativeEvent","stopImmediatePropagation","RefreshSettings","refreshIntervalSeconds","onRefreshIntervalChange","onRefreshToggleChange","checked","App","handleRefreshToggleChange","handleRefreshIntervalChange","getRefreshIntervalInMilliSeconds","index_module","htmlAttributes","lang","amp","undefined","meta","content","title","components_RefreshSettings","Header_Header_Header","ProjectList_ProjectList_ProjectList","Boolean","window","location","hostname","match","ReactDOM","App_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e901435b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/plus.26c522c2.svg\";","import React from 'react';\nimport './Header.css';\n\nexport default class Header extends React.Component {\n  render() {\n    return (\n      <div className=\"header\">\n        <h1>CommitStatus</h1>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport '../ProjectList/ProjectList.css';\nimport './AddProject.css';\n\nvar axios = require('axios');\n/**\n * Use this to add new error messages\n */\nvar errorMessages = {\n  unauthorized_entry: 'You do not have access',\n  not_found: 'The repo that you are looking is invalid',\n  default_error: 'Problem with Commit Status. Please try again later',\n};\n\nexport default class AddProject extends React.Component {\n  state = {\n    input: '',\n  };\n\n  handleChange = e => {\n    this.setState({ input: e.target.value });\n  };\n\n  alertUser = message => {\n    /**\n     * I couldnt think of any other logic than to use\n     * vanilla js. TODO : Pull in jquery and maybe use that\n     */\n    const errorElement = document.createElement('div'),\n      closeBtn = document.createElement('span'),\n      errorMessage = document.createTextNode(message);\n    errorElement.classList.add('error-message');\n    errorElement.appendChild(errorMessage);\n    closeBtn.classList.add('close');\n    closeBtn.innerText = 'X';\n    closeBtn.addEventListener('click', this.handleClose);\n    errorElement.appendChild(closeBtn);\n    document\n      .querySelector('.add-container')\n      .appendChild(errorElement)\n      .focus();\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const params = {};\n    if (process.env.REACT_APP_GITHUB_TOKEN) {\n      params.headers = {\n        Authorization: process.env.REACT_APP_GITHUB_TOKEN,\n      };\n    }\n    axios\n      .get(\n        `https://api.github.com/repos/${this.state.input}/commits/master/status`,\n        params\n      )\n      .then(data => {\n        let obj = {\n          name: data.data.repository.full_name,\n          status: data.data.state,\n        };\n        this.props.addProject(obj);\n      })\n      .catch(er => {\n        if (er.response.status === 403) {\n          return this.alertUser(errorMessages['unauthorized_entry']);\n        } else if (er.response.status === 404) {\n          return this.alertUser(errorMessages['not_found']);\n        }\n        return this.alertUser(errorMessages['default_error']);\n      });\n    this.setState({\n      input: '',\n    });\n  };\n  handlePress = e => {\n    e.preventDefault();\n    this.setState({ input: '' });\n  };\n\n  handleClose = e => {\n    e.preventDefault();\n    document\n      .querySelector('.add-container')\n      .removeChild(e.target.parentElement);\n  };\n\n  render = () => {\n    return (\n      <div className=\"add-container\">\n        <div className=\"add-bar-container\">\n          <form className=\"add-bar-container\" onSubmit={this.handleSubmit}>\n            <input\n              className=\"add-bar\"\n              type=\"text\"\n              value={this.state.input}\n              spellCheck=\"false\"\n              onChange={this.handleChange}\n              placeholder=\"sitture/commit-status\"\n            />\n            <img\n              className=\"add-icon\"\n              alt=\"\"\n              src={require('../../assets/icons/plus.svg')}\n            />\n          </form>\n        </div>\n      </div>\n    );\n  };\n}\n","import React, { Component } from 'react';\nimport './ProjectDetails.css';\nvar axios = require('axios');\n\nconst params = {};\n\nif (process.env.REACT_APP_GITHUB_TOKEN) {\n  params.headers = {\n    Authorization: process.env.REACT_APP_GITHUB_TOKEN,\n  };\n}\n\nexport default class ProjectDetails extends Component {\n  state = {\n    commitDetails: null,\n    shouldRefresh: false,\n  };\n  componentDidMount = () => {\n    axios\n      .get(`https://api.github.com/repos/${this.props.name}/commits`, params)\n      .then(data => {\n        this.setState({ commitDetails: data.data });\n      });\n  };\n\n  componentDidUpdate = (prevProps) => {\n    if (\n      (this.props.isRefreshEnabled && this.state.shouldRefresh && !this.interval) ||\n      prevProps.refreshIntervalMillis !== this.props.refreshIntervalMillis\n    ) {\n      // Refresh is allowed globally, this component should refresh, but is not refreshing\n      this.stopLocalAutoRefresh();\n      this.startLocalAutoRefresh();\n    } else if (!this.props.isRefreshEnabled && this.interval) {\n      // Refresh is NOT allowed globally, but this project is refreshing\n      this.stopLocalAutoRefresh();\n    }\n  };\n\n  componentWillUnmount() {\n    this.stopLocalAutoRefresh();\n  }\n\n  interval = null;\n\n  stopLocalAutoRefresh = () => {\n    clearInterval(this.interval);\n    this.interval = null;\n  };\n\n  startLocalAutoRefresh = () => {\n    this.interval = setInterval(() => {\n      axios\n        .get(`https://api.github.com/repos/${this.props.name}/commits`, params)\n        .then(data => this.setState({ commitDetails: data.data }));\n    }, this.props.refreshIntervalMillis);\n  };\n\n  toggleAutoRefresh(e) {\n    e.stopPropagation(); // Prevent the click event from being fired on the parent elements as well\n    if (!this.props.isRefreshEnabled) {\n      // Should not be able to change state if refresh is disabeled globally\n      return;\n    }\n\n    this.setState(\n      prevState => {\n        return {\n          shouldRefresh: !prevState.shouldRefresh,\n        };\n      },\n      () => {\n        this.stopLocalAutoRefresh();\n\n        if (this.state.shouldRefresh && this.props.isRefreshEnabled) {\n          this.startLocalAutoRefresh();\n        }\n      }\n    );\n  }\n\n  render() {\n    const tableHeading = [\"Commiter\", \"Message\", \"Date\", \"changes\"]\n    if (!this.state.commitDetails) {\n      return (\n        <div>\n          <h5>Loading details ...</h5>\n        </div>\n      );\n    }\n    let toggleMessage = 'Toggle Auto Refresh OFF';\n    if (!this.props.isRefreshEnabled) {\n      toggleMessage = 'Refresh Disabeled Globally';\n    } else if (!this.state.shouldRefresh) {\n      toggleMessage = 'Toggle Auto Refresh ON';\n    }\n    return (\n      <div className=\"ProjectDetails\">\n        <button\n          onClick={e => this.toggleAutoRefresh(e)}\n          className=\"autoRefreshButton\"\n        >\n          {toggleMessage}\n        </button>\n        Commit Details\n        <div className=\"card\">\n          {tableHeading.map((item, index) => {\n            return (\n                <div className=\"heading\">\n                  {item}\n                </div>\n            )\n          })}\n        </div>\n        <div>\n          {this.state.commitDetails.map((details, index) => {\n            return (\n                <div className=\"card\">\n                  <div className=\"name\">{details.commit.committer.name}</div>\n                  <div className=\"message\">{details.commit.message}</div>\n                  <div className=\"date\">{details.commit.committer.date}</div>\n                  <div className=\"changes\">\n                    <a\n                      href={details.html_url}\n                      rel=\"noopener noreferrer\"\n                      target=\"_blank\"\n                    >\n                      See changes here\n                    </a>\n                  </div>\n                </div>\n            )\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport { Delete } from 'react-feather';\nimport './Filter.css';\n\nimport ProjectDetails from '../ProjectDetails/ProjectDetails';\n\nexport default class Filter extends PureComponent {\n  printProjectList = proj => {\n    return proj.map((project, index) => {\n      return (\n        <div\n          key={project.name}\n          className={`project ${project.status}`}\n          onClick={() => this.props.handleProjectClick(index)}\n        >\n          <div className=\"row\">\n            <a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href={`https://github.com/${project.name}`}\n            >\n              {project.name}\n            </a>{' '}\n            <button\n              className=\"remove\"\n              onClick={this.props.onRemoveClick(project.name)}\n            >\n              <Delete />\n            </button>\n          </div>\n          {project.isOpen && (\n            <ProjectDetails\n              name={project.name}\n              isRefreshEnabled={this.props.isRefreshEnabled}\n              refreshIntervalMillis={this.props.refreshIntervalMillis}\n            />\n          )}\n        </div>\n      );\n    });\n  };\n\n  render = () => {\n    const { projects } = this.props;\n\n    let unhealthyList = projects.filter(proj => {\n      return proj.status !== 'success';\n    });\n\n    return (\n      <div className=\"tab-filter\">\n        <Tabs>\n          <TabList>\n            <Tab>All</Tab>\n            <Tab>Unhealthy</Tab>\n          </TabList>\n\n          <TabPanel>\n            {projects.length > 0\n              ? this.printProjectList(projects)\n              : 'No projects are being monitored.'}\n          </TabPanel>\n          <TabPanel>\n            {(() => {\n              if (projects.length === 0)\n                return 'No projects are being monitored.';\n              if (unhealthyList.length === 0) return 'All projects are green.';\n              return this.printProjectList(unhealthyList);\n            })()}\n          </TabPanel>\n        </Tabs>\n      </div>\n    );\n  };\n}\n","import React from 'react';\nimport './ProjectList.css';\nimport AddProject from '../AddProject/AddProject';\nimport Filter from '../Filter/Filter';\n\nvar axios = require('axios');\n\nexport default class ProjectList extends React.Component {\n  DEFAULT_STATUS = 'pending';\n  LS_PROJECTS_KEY = 'projects';\n\n  state = {\n    projects: [],\n  };\n\n  authoRefreshIntervalId = null;\n\n  componentDidMount = () => {\n    this.loadProjects();\n    if (this.props.isRefreshEnabled) {\n      this.autoRefreshProjectStatuses();\n    }\n  };\n\n  componentWillUnmount = () => {\n    this.stopProjectsAutoRefresh();\n  };\n\n  componentDidUpdate = (prevProps, prevState, snapshot) => {\n    if (\n      this.props.isRefreshEnabled &&\n      (!this.authoRefreshIntervalId ||\n        prevState.projects.length !== this.state.projects.length ||\n        prevState.refreshIntervalMillis !== this.props.refreshIntervalMillis\n      )\n    ) {\n      this.stopProjectsAutoRefresh();\n      this.autoRefreshProjectStatuses();\n    } else if (!this.props.isRefreshEnabled) {\n      this.stopProjectsAutoRefresh();\n    }\n  };\n\n  stopProjectsAutoRefresh = () => {\n    clearInterval(this.authoRefreshIntervalId);\n    this.authoRefreshIntervalId = null;\n  };\n\n  loadProjects = () => {\n    const projects = this.getProjectsFromLocalStorage();\n\n    const sortedProjects = projects\n      .map(project => {\n        return { name: project, status: this.DEFAULT_STATUS };\n      })\n      .sort(this.sortProjects);\n\n    this.setState({ projects: sortedProjects }, this.loadProjectStatuses);\n  };\n\n  loadProjectStatuses = () => {\n    const params = {};\n\n    if (process.env.REACT_APP_GITHUB_TOKEN) {\n      params.headers = {\n        Authorization: process.env.REACT_APP_GITHUB_TOKEN,\n      };\n    }\n\n    let promiseArray = this.state.projects.map(project => {\n      return axios.get(\n        `https://api.github.com/repos/${project.name}/commits/master/status`,\n        params\n      );\n    });\n\n    Promise.all(promiseArray)\n      .then(\n        results => {\n          const sortedProjects = results.map(project => {\n            return {\n              name: project.data.repository.full_name,\n              status: project.data.state,\n            };\n          });\n\n          const updatedProjects = [...this.state.projects];\n          let shouldUpdateState = false;\n          sortedProjects.forEach((project, index) => {\n            if (updatedProjects[index].status !== project.status) {\n              updatedProjects[index].status = project.status;\n              shouldUpdateState = true;\n            }\n          });\n\n          if (shouldUpdateState) {\n            this.setState({\n              projects: updatedProjects,\n            });\n          }\n        },\n        reason => {\n          console.log('error', reason);\n        }\n      )\n      .catch(console.log);\n  };\n\n  autoRefreshProjectStatuses = () => {\n    if (this.state.projects.length && !this.authoRefreshIntervalId) {\n      const authoRefreshIntervalId = setInterval(() => {\n        this.loadProjectStatuses();\n      }, this.props.refreshIntervalMillis);\n      this.authoRefreshIntervalId = authoRefreshIntervalId;\n    } else if (!this.state.projects.length && this.authoRefreshIntervalId) {\n      this.stopProjectsAutoRefresh();\n    }\n  };\n\n  sortProjects = (a, b) => {\n    if (a.name < b.name) return -1;\n    else if (a.name > b.name) return 1;\n    return a.status > b.status ? -1 : 1;\n  };\n\n  onRemoveClick(name) {\n    return event => {\n      event.stopPropagation();\n\n      let filteredArray = this.state.projects.filter(\n        project => project.name !== name\n      );\n\n      this.removeProjectFromLocalStorage(name);\n\n      this.setState({\n        projects: filteredArray,\n      });\n    };\n  }\n\n  addProject = newProject => {\n    const alreadyAdded = this.state.projects.some(project => {\n      return project.name === newProject.name;\n    });\n\n    if (!alreadyAdded) {\n      const newArray = [...this.state.projects, newProject].sort(\n        this.sortProjects\n      );\n      this.addProjectToLocalStorage(newProject.name);\n\n      this.setState({ projects: newArray });\n    }\n  };\n\n  getProjectsFromLocalStorage() {\n    const projects = localStorage.getItem(this.LS_PROJECTS_KEY);\n\n    if (!projects) {\n      return [];\n    }\n\n    return JSON.parse(projects);\n  }\n\n  addProjectToLocalStorage = projectName => {\n    const projects = this.getProjectsFromLocalStorage();\n    projects.push(projectName);\n\n    localStorage.setItem(this.LS_PROJECTS_KEY, JSON.stringify(projects));\n  };\n\n  removeProjectFromLocalStorage = projectName => {\n    const projects = this.getProjectsFromLocalStorage();\n    const updatedProjectsList = projects.filter(\n      project => project !== projectName\n    );\n\n    localStorage.setItem(\n      this.LS_PROJECTS_KEY,\n      JSON.stringify(updatedProjectsList)\n    );\n  };\n\n  handleProjectClick(index) {\n    this.setState({\n      projects: this.state.projects.map((project, pIndex) => {\n        if (pIndex === index)\n          return {\n            ...project,\n            isOpen: !project.isOpen,\n          };\n        return project;\n      }),\n    });\n  }\n\n  clickWithNoPropagation(e) {\n    e.nativeEvent.stopImmediatePropagation();\n    e.stopPropagation();\n  }\n\n  render = () => {\n    let addProject = this.addProject;\n\n    return (\n      <div>\n        <AddProject addProject={project => addProject(project)} />\n        <Filter\n          projects={this.state.projects}\n          handleProjectClick={this.handleProjectClick.bind(this)}\n          onRemoveClick={this.onRemoveClick.bind(this)}\n          isRefreshEnabled={this.props.isRefreshEnabled}\n          refreshIntervalMillis={this.props.refreshIntervalMillis}\n        />\n      </div>\n    );\n  };\n}\n","import React from 'react';\n\nconst RefreshSettings = (props) => {\n  return (\n    <div className=\"refresh-settings-container\">\n      <span className=\"slider-text\">Refresh every</span>\n      <input\n        className=\"refresh-interval-input\"\n        value={props.refreshIntervalSeconds}\n        onChange={props.onRefreshIntervalChange}\n      />\n      <span className=\"slider-text\">seconds</span>\n      <label className=\"switch\">\n        <input\n          className=\"refreshCheckbox\"\n          type=\"checkbox\"\n          onChange={props.onRefreshToggleChange}\n          checked={props.isRefreshEnabled}\n        />\n        <span className=\"slider round\" />\n      </label>\n    </div>\n  );\n};\n\nexport default RefreshSettings;\n","import React, { Component } from 'react';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport ProjectList from './components/ProjectList/ProjectList';\nimport RefreshSettings from './components/RefreshSettings';\n\nexport default class App extends Component {\n  state = {\n    isRefreshEnabled: true,\n    refreshIntervalSeconds: 30,\n  };\n\n  handleRefreshToggleChange = () => {\n    this.setState(prevState => {\n      return { isRefreshEnabled: !prevState.isRefreshEnabled };\n    });\n  };\n\n  handleRefreshIntervalChange = (event) => {\n    this.setState({refreshIntervalSeconds: event.target.value});\n  };\n\n  getRefreshIntervalInMilliSeconds = () => this.state.refreshIntervalSeconds * 1000;\n\n  render() {\n    return (\n      <div className=\"App\">\n        <HelmetProvider>\n          <Helmet\n            htmlAttributes={{ lang: 'en', amp: undefined }}\n            meta={[\n              {\n                name: 'description',\n                content:\n                  'A simple React app that shows a list of projects with their Github commit status and use it as a dashboard to view status of your CI pipelines.',\n              },\n            ]}\n            title=\"CommitStatus\"\n          />\n        </HelmetProvider>\n        <RefreshSettings\n          isRefreshEnabled={this.state.isRefreshEnabled}\n          refreshIntervalSeconds={this.state.refreshIntervalSeconds}\n          onRefreshIntervalChange={this.handleRefreshIntervalChange}\n          onRefreshToggleChange={this.handleRefreshToggleChange}\n        />\n        <Header />\n        <ProjectList\n          isRefreshEnabled={this.state.isRefreshEnabled}\n          refreshIntervalMillis={this.getRefreshIntervalInMilliSeconds()}\n        />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}