{"version":3,"sources":["components/Header/Header.js","components/AddProject/AddProject.js","components/ProjectDetails/ProjectDetails.js","components/Filter/Filter.js","components/ProjectList/ProjectList.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","React","Component","axios","require","errorMessages","unauthorized_entry","not_found","default_error","AddProject","state","input","handleChange","e","_this","setState","target","value","alertUser","message","errorElement","document","closeBtn","errorMessage","createTextNode","classList","add","appendChild","innerText","addEventListener","handleClose","querySelector","focus","handleSubmit","preventDefault","params","process","REACT_APP_GITHUB_TOKEN","headers","Authorization","get","concat","then","data","obj","name","repository","full_name","status","props","addProject","catch","er","response","handlePress","removeChild","parentElement","render","onSubmit","type","spellCheck","onChange","placeholder","alt","src","ProjectDetails","commitDetails","componentDidMount","this","map","details","index","key","commit","committer","date","href","html_url","rel","Filter","printProjectList","proj","project","onClick","handleProjectClick","onRemoveClick","isOpen","ProjectDetails_ProjectDetails_ProjectDetails","projects","unhealthyList","filter","esm","projectStatus","ProjectList","DEFAULT_STATUS","LS_PROJECTS_KEY","loadProjects","sortedProjects","getProjectsFromLocalStorage","sort","sortProjects","loadProjectStatuses","promiseArray","Promise","all","results","reason","console","log","b","flag","forEach","newArray","Object","toConsumableArray","addProjectToLocalStorage","projectName","push","localStorage","setItem","JSON","stringify","removeProjectFromLocalStorage","updatedProjectsList","AddProject_AddProject_AddProject","Filter_Filter_Filter","bind","assertThisInitialized","_this2","event","stopPropagation","filteredArray","getItem","parse","currentTarget","pIndex","nativeEvent","stopImmediatePropagation","App","Helmet_default","htmlAttributes","lang","amp","undefined","meta","content","title","Header_Header_Header","ProjectList_ProjectList_ProjectList","Boolean","window","location","hostname","match","ReactDOM","App_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9833d1f6.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nexport default class Header extends React.Component {\n  render() {\n    return (\n      <div className=\"header\">\n        <h1>CommitStatus</h1>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport '../ProjectList/ProjectList.css';\nimport './AddProject.css';\n\nvar axios = require('axios');\n/**\n * Use this to add new error messages\n */\nvar errorMessages = {\n  unauthorized_entry : \"You do not have access\",\n  not_found : \"The repo that you are looking is invalid\",\n  default_error : \"Problem with Commit Status. Please try again later\"\n};\n\nexport default class AddProject extends React.Component {\n  state = {\n    input:\"\"\n  };\n\n  handleChange = (e) => {\n    this.setState({input:e.target.value})\n  }\n\n  alertUser = (message) => { \n    /**\n     * I couldnt think of any other logic than to use \n     * vanilla js. TODO : Pull in jquery and maybe use that\n     */\n    const errorElement = document.createElement('div'),\n          closeBtn = document.createElement('span'),\n          errorMessage = document.createTextNode(message);\n    errorElement.classList.add('error-message');\n    errorElement.appendChild(errorMessage);\n    closeBtn.classList.add('close');\n    closeBtn.innerText = 'X';\n    closeBtn.addEventListener('click', this.handleClose);\n    errorElement.appendChild(closeBtn);\n    document.querySelector('.add-container')\n            .appendChild(errorElement).focus();\n  }\n  \n  handleSubmit = (e) => {\n    e.preventDefault();\n    const params = {};\n    if (process.env.REACT_APP_GITHUB_TOKEN) {\n      params.headers = {\n        Authorization: process.env.REACT_APP_GITHUB_TOKEN,\n      };\n    }\n    axios.get(\n      `https://api.github.com/repos/${this.state.input}/commits/master/status`,\n      params\n    ).then(data=>{\n      let obj = {\n        name : data.data.repository.full_name,\n        status : data.data.state\n      }\n      this.props.addProject(obj)\n     \n    }).catch(er => {\n      if(er.response.status === 403) {\n        return this.alertUser(errorMessages['unauthorized_entry']);\n      }\n      else if(er.response.status === 404) {\n        return this.alertUser(errorMessages['not_found']);\n      }\n      return this.alertUser(errorMessages['default_error'])\n    })\n  this.setState({\n    input:\"\"\n  })\n\n  }\nhandlePress=(e)=>{\n  e.preventDefault();\n  this.setState({input:\"\"})\n}\n\nhandleClose=(e)=>{\n  e.preventDefault();\n  document.querySelector('.add-container')\n          .removeChild(e.target.parentElement);\n}\n\n  render = () => {\n  \n    return (\n      \n      <div className=\"add-container\">\n        <div className=\"add-bar-container\">\n          <form className=\"add-bar-container\" onSubmit={this.handleSubmit}>\n            <input\n              className=\"add-bar\"\n              type=\"text\"\n              value={this.state.input}\n              spellCheck=\"false\"\n              onChange={this.handleChange}\n              placeholder=\"sitture/commit-status\"\n            />\n            <img\n              className=\"add-icon\"\n              alt=\"\"\n              src=\"/plus.svg\"\n            />\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport \"./ProjectDetails.css\";\nvar axios = require('axios');\nexport default class ProjectDetails extends Component {\n    state={\n        commitDetails:null\n    }\n    componentDidMount=()=>{\n        const params = {};\n      if (process.env.REACT_APP_GITHUB_TOKEN) {\n        params.headers = {\n          Authorization: process.env.REACT_APP_GITHUB_TOKEN,\n        };\n      }\n  \n      axios.get(\n        `https://api.github.com/repos/${this.props.name}/commits`,\n        params\n      ).then(data=>this.setState({commitDetails:data.data}))\n    }\n    render() {\n       if(!this.state.commitDetails){\n           return(\n               <div><h5>Loading details ...</h5></div>\n           )\n       }\n        return (\n            <div>\n             Commit Details\n             <table>\n                 <thead>\n                            <tr>\n                               <th>Committer</th> \n                               <th>Message</th>\n                               <th>Date</th> \n                                <th>Changes</th> \n                            </tr>\n                            </thead>\n                            <tbody>\n                {this.state.commitDetails.map((details,index)=>(\n                    <tr key={index}>\n                        \n                        <td>{details.commit.committer.name}</td>\n                        <td>{details.commit.message}</td>\n                        <td>{details.commit.committer.date}</td>\n                      <td><a href={details.html_url} rel=\"noopener noreferrer\"  target=\"_blank\">See changes here</a></td> \n                      \n                    </tr>\n                ))}\n                </tbody> \n                  </table>\n            </div>\n            \n        )\n    }\n}\n","import React, { Component } from 'react';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport './Filter.css';\n\nimport ProjectDetails from '../ProjectDetails/ProjectDetails';\n\nexport default class Filter extends Component {\n    printProjectList = (proj) => {\n        return (proj.map((project, index) => {\n            return (\n                <div\n                    key={index}\n                    className={`project ${project.status}`}\n                    onClick={() => this.props.handleProjectClick(index)}\n                >\n                    <a\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        href={`https://github.com/${project.name}`}\n                    >\n                        {project.name}\n                    </a>{' '}\n                    - <span className={project.status}>{project.status}</span>\n\n                    <button className=\"remove\" onClick={this.props.onRemoveClick(project.name)}>\n                        Remove\n                    </button>\n                    {project.isOpen && <ProjectDetails name={project.name} />}\n                </div>\n            );\n        }));\n    }\n\n    render = () => {\n        const { projects } = this.props;\n\n        let unhealthyList = projects.filter((proj) => {\n            return proj.status !== \"success\"\n        });\n\n        return (\n            <div className=\"tab-filter\">\n                <Tabs>\n                    <TabList>\n                        <Tab>All</Tab>\n                        <Tab>Unhealthy</Tab>\n                    </TabList>\n\n                    <TabPanel>\n                        {projects.projectStatus}\n                        {this.printProjectList(projects)}\n                    </TabPanel>\n                    <TabPanel>\n                        {projects.projectStatus}\n                        {this.printProjectList(unhealthyList)}\n                    </TabPanel>\n                </Tabs>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './ProjectList.css';\nimport AddProject from '../AddProject/AddProject';\nimport Filter from '../Filter/Filter';\n\nvar axios = require('axios');\n\nexport default class ProjectList extends React.Component {\n  DEFAULT_STATUS = 'pending';\n  LS_PROJECTS_KEY = 'projects';\n\n  state = {\n    projects: [],\n  };\n\n  componentDidMount = () => {\n    this.loadProjects();\n  };\n\n  loadProjects = () => {\n    const projects = this.getProjectsFromLocalStorage();\n\n    const sortedProjects = projects\n      .map((project) => {\n        return {name: project, status: this.DEFAULT_STATUS};\n      })\n      .sort(this.sortProjects);\n\n    this.setState({projects: sortedProjects}, this.loadProjectStatuses);\n  };\n\n  loadProjectStatuses = () => {\n    const params = {};\n\n    if (process.env.REACT_APP_GITHUB_TOKEN) {\n      params.headers = {\n        Authorization: process.env.REACT_APP_GITHUB_TOKEN,\n      };\n    }\n\n    let promiseArray = this.state.projects.map((project) => {\n      return axios.get(\n        `https://api.github.com/repos/${project.name}/commits/master/status`,\n        params,\n      );\n    });\n    Promise.all(promiseArray)\n      .then(\n        (results) => {\n          const sortedProjects = results\n            .map(function(project) {\n              return {\n                name: project.data.repository.full_name,\n                status: project.data.state,\n              };\n            })\n            .sort(this.sortProjects);\n\n          this.setState({\n            projects: sortedProjects,\n          });\n        },\n        (reason) => {\n          console.log('error', reason);\n        },\n      )\n      .catch(console.log());\n  };\n\n  sortProjects = (a, b) => {\n    if (a.name < b.name) return -1;\n    else if (a.name > b.name) return 1;\n    return a.status > b.status ? -1 : 1;\n  };\n\n  onRemoveClick(name) {\n    return (event) => {\n      event.stopPropagation();\n\n      let filteredArray = this.state.projects.filter((project)=>project.name!==name)\n\n      this.removeProjectFromLocalStorage(name);\n\n      this.setState({\n        projects : filteredArray\n      })\n    }\n  }\n\n  addProject = (project) => {\n    let flag = 0;\n    this.state.projects.forEach((proj) => {\n      if (proj.name === project.name && proj.status === project.status) {\n        flag = 1;\n      }\n    });\n\n    if (!(flag === 1)) {\n      let newArray = [...this.state.projects, project].sort(this.sortProjects);\n      this.addProjectToLocalStorage(project.name);\n\n      this.setState({projects: newArray});\n    }\n  };\n\n  getProjectsFromLocalStorage() {\n    const projects = localStorage.getItem(this.LS_PROJECTS_KEY);\n\n    if (!projects) {\n      return [];\n    }\n\n    return JSON.parse(projects);\n  }\n\n  addProjectToLocalStorage = (projectName) => {\n    const projects = this.getProjectsFromLocalStorage();\n    projects.push(projectName);\n\n    localStorage.setItem(this.LS_PROJECTS_KEY, JSON.stringify(projects));\n  };\n\n  removeProjectFromLocalStorage = (projectName) => {\n    const projects = this.getProjectsFromLocalStorage();\n    const updatedProjectsList = projects.filter(\n      (project) => project !== projectName,\n    );\n\n    localStorage.setItem(\n      this.LS_PROJECTS_KEY,\n      JSON.stringify(updatedProjectsList),\n    );\n  };\n\n  handleProjectClick(e, index) {\n    if (e.target === e.currentTarget) {\n      this.setState({\n        projects: this.state.projects.map((project, pIndex) => {\n          if (pIndex !== index || (pIndex === index && project.isOpen)) {\n            project.isOpen = false;\n            return project;\n          }\n          project.isOpen = true;\n          return project;\n        }),\n      });\n    }\n  }\n\n  clickWithNoPropagation(e) {\n    e.nativeEvent.stopImmediatePropagation();\n    e.stopPropagation();\n  }\n\n  render = () => {\n   let addProject = this.addProject;\n\n    return (\n      <div>\n        <AddProject addProject={(project) => addProject(project)} />\n        <Filter \n          projects={this.state.projects} \n          handleProjectClick={this.handleProjectClick.bind(this)}\n          onRemoveClick={this.onRemoveClick.bind(this)}\n        />\n      </div>\n    );\n  };\n}\n","import React, { Component } from 'react';\nimport Helmet from 'react-helmet';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport ProjectList from './components/ProjectList/ProjectList';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Helmet\n          htmlAttributes={{ lang: 'en', amp: undefined }}\n          meta={[\n            {\n              name: 'description',\n              content:\n                'A simple React app that shows a list of projects with their Github commit status and use it as a dashboard to view status of your CI pipelines.',\n            },\n          ]}\n          title=\"CommitStatus\"\n        />\n        <Header />\n        <ProjectList/>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}